/**
 * SolanaWP Theme Customizer enhancements for a better user experience.
 * Version 3: Added live preview for Blue Banner colors.
 *
 * Contains handlers to make Theme Customizer preview reload changes asynchronously.
 * Used when a Customizer setting has 'transport' => 'postMessage'.
 * Works in conjunction with settings defined in inc/customizer.php.
 */

( function( $ ) {

    // Site Title (Blogname) - PHP selective refresh handles this.
    wp.customize( 'blogname', function( value ) {
        value.bind( function( to ) {
            // $( '.site-header .brand-name a' ).text( to );
        } );
    } );

    // Site Tagline (Blogdescription) - PHP selective refresh handles this.
    wp.customize( 'blogdescription', function( value ) {
        value.bind( function( to ) {
            // $( '.site-description' ).text( to );
        } );
    } );

    // Helper function to update CSS variables or inject styles
    function solanawp_update_dynamic_styles(cssRules) {
        var $dynamicStyle = $('#solanawp-customizer-preview-styles');
        if (!$dynamicStyle.length) {
            $('head').append('<style id="solanawp-customizer-preview-styles"></style>');
            $dynamicStyle = $('#solanawp-customizer-preview-styles');
        }

        var newStyleContent = $dynamicStyle.html(); // Get current styles
        var ruleRegex;

        for (var selector in cssRules) {
            var ruleBlock = selector + ' { ';
            for (var property in cssRules[selector]) {
                ruleBlock += property + ': ' + cssRules[selector][property] + ' !important; ';
            }
            ruleBlock += '} ';

            // Regex to find existing rule for this selector
            // This is a simplified regex, might need refinement for complex selectors
            ruleRegex = new RegExp(selector.replace(/[.*+?^${}()|[\]\\]/g, '\\$&') + '\\s*\\{[^\\}]*\\}', 'g');

            if (newStyleContent.match(ruleRegex)) {
                // Replace existing rule
                newStyleContent = newStyleContent.replace(ruleRegex, ruleBlock);
            } else {
                // Add new rule
                newStyleContent += ruleBlock;
            }
        }
        $dynamicStyle.html(newStyleContent);
    }


    // Logo Size (solanawp_logo_size)
    wp.customize( 'solanawp_logo_size', function( value ) {
        value.bind( function( newSize ) {
            var sizeInPx = newSize + 'px';
            var rules = {
                '.custom-logo-link img, .site-header .logo': {
                    'width': sizeInPx,
                    'height': sizeInPx
                }
            };
            solanawp_update_dynamic_styles(rules);
        } );
    } );

    // Brand Name Font Size (solanawp_brand_name_font_size)
    wp.customize( 'solanawp_brand_name_font_size', function( value ) {
        value.bind( function( newSize ) {
            var sizeInPx = newSize + 'px';
            var rules = {
                '.site-header .brand-name, .site-header .brand-name a': {
                    'font-size': sizeInPx
                }
            };
            solanawp_update_dynamic_styles(rules);
        } );
    } );

    // Header Height (solanawp_header_height)
    wp.customize('solanawp_header_height', function(value) {
        value.bind(function(newHeight) {
            // This primarily affects CSS generated by PHP.
            // JS preview can be basic or rely on PHP's output for complex scaling.
            // For simplicity, significant scaling is better handled by PHP refresh or selective refresh of CSS block.
        });
    });


    // Primary Accent Color (solanawp_primary_accent_color)
    wp.customize( 'solanawp_primary_accent_color', function( value ) {
        value.bind( function( newval ) {
            document.documentElement.style.setProperty('--solanawp-primary-accent-color', newval);
            // For box-shadows which use RGBA, we might need to trigger a refresh of the CSS block
            // or pass the RGBA value via PHP if solanawp_hex_to_rgba_js is not robust enough for all cases.
            // For now, direct CSS variable update is the primary mechanism.
        } );
    } );

    // Secondary Accent Color (solanawp_secondary_accent_color)
    wp.customize( 'solanawp_secondary_accent_color', function( value ) {
        value.bind( function( newval ) {
            document.documentElement.style.setProperty('--solanawp-secondary-accent-color', newval);
        } );
    } );

    // Footer Copyright Text (solanawp_footer_copyright_text) - PHP selective refresh handles this.

    // Blue Banner Main Text
    wp.customize( 'solanawp_blue_banner_main_text', function( value ) {
        value.bind( function( newText ) {
            $( '.hero-sub-banner .hero-sub-banner-main-text' ).text( newText || solanawpCustomizerPreviewData.blueBannerMainTextDefault );
        } );
    } );

    // Blue Banner Sub-Text
    wp.customize( 'solanawp_blue_banner_sub_text', function( value ) {
        value.bind( function( newText ) {
            $( '.hero-sub-banner .hero-sub-banner-sub-text' ).text( newText || solanawpCustomizerPreviewData.blueBannerSubTextDefault );
        } );
    } );

    // Blue Banner Background Color
    wp.customize( 'solanawp_blue_banner_bg_color', function( value ) {
        value.bind( function( newval ) {
            // Directly update the CSS variable used by functions.php CSS output
            document.documentElement.style.setProperty('--solanawp-blue-banner-bg-color-var', newval || solanawpCustomizerPreviewData.blueBannerBgColorDefault);
        } );
    } );

    // Blue Banner Text Color
    wp.customize( 'solanawp_blue_banner_text_color_customizer', function( value ) {
        value.bind( function( newval ) {
            // Directly update the CSS variable used by functions.php CSS output
            document.documentElement.style.setProperty('--solanawp-blue-banner-text-color-var', newval || solanawpCustomizerPreviewData.blueBannerTextColorDefault);
        } );
    } );


    // Helper function for JS equivalent of PHP hex_to_rgba (simplified, might not be needed if CSS vars handle it)
    function solanawp_hex_to_rgba_js(hex, alpha) {
        var r, g, b;
        if (!hex) return '';
        hex = hex.replace('#', '');
        if (hex.length === 3) {
            r = parseInt(hex.substring(0, 1) + hex.substring(0, 1), 16);
            g = parseInt(hex.substring(1, 2) + hex.substring(1, 2), 16);
            b = parseInt(hex.substring(2, 3) + hex.substring(2, 3), 16);
        } else if (hex.length === 6) {
            r = parseInt(hex.substring(0, 2), 16);
            g = parseInt(hex.substring(2, 4), 16);
            b = parseInt(hex.substring(4, 6), 16);
        } else {
            return ''; // Invalid hex
        }
        if (isNaN(r) || isNaN(g) || isNaN(b)) return '';
        return 'rgba(' + r + ',' + g + ',' + b + ',' + alpha + ')';
    }

} )( jQuery );
